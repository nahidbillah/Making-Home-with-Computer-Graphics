#include <GL/glut.h>
#include <stdio.h>
#include <GL/gl.h>
 
void init(void)
{
  glClearColor(0.0,0.0,0.0,0.0); //GLfloat red,green,blue,alpha initial value 0 alpha values used by glclear to clear the color buffers
  glMatrixMode(GL_PROJECTION);  // To specify which matrix is the current matrix & projection applies subsequent matrix to projecton matrix stack
  glLoadIdentity();
  glOrtho(0.0, 500.0, 0.0, 500.0, -1.0, 500.0);
  //gluOrtho2D(0.0,300.0,0.0,300.0); // Orthographic representation; multiply the current matrix by an orthographic matrix 2D= left right,bottom,top equivalent near=-1,far=1
}
 
 
void Draw()
{
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f( 1 ,0, 0);
   glBegin(GL_TRIANGLES);
   glVertex2d(75,300);
   glVertex2d(250,450);
   glVertex2d(425,300);
   glEnd();
 
 
// Write your Code
 
 
   glColor3f(0,1, 0);
   glBegin(GL_POLYGON);
   glVertex2d(100,50);
   glVertex2d(100,300);
   glVertex2d(400,300);
   glVertex2d(400,50);
   glEnd();
 
   glColor3f(0,0, 1);
   glBegin(GL_POLYGON);
   glVertex2d(175,50);
   glVertex2d(175,200);
   glVertex2d(250,200);
   glVertex2d(250,50);
   glEnd();
 
   glColor3f(0,0, 1);
   glBegin(GL_POLYGON);
   glVertex2d(175,215);
   glVertex2d(175,230);
   glVertex2d(250,230);
   glVertex2d(250,215);
   glEnd();
 
   glColor3f(1,0, 0);
   glBegin(GL_POLYGON);
   glVertex2d(300,125);
   glVertex2d(300,200);
   glVertex2d(350,200);
   glVertex2d(350,125);
   glEnd();
 
   glColor3f(1,0, 0);
   glBegin(GL_POLYGON);
   glVertex2d(300,215);
   glVertex2d(300,230);
   glVertex2d(350,230);
   glVertex2d(350,215);
   glEnd();
 
glFlush();
 
glutSwapBuffers();
}
 
int main(int argc,char **argv){
 
 
    glutInit(&argc,argv);
    glutInitDisplayMode ( GLUT_RGB | GLUT_DOUBLE );
    glutInitWindowPosition(0,0);
    glutInitWindowSize(900,600);
    glutCreateWindow("Lab Final");
    init();
    glutDisplayFunc(Draw);
    glutMainLoop();
    return 0;
}